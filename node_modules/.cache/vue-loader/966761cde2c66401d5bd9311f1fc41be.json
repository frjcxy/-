{"remainingRequest":"C:\\Users\\Asus\\Desktop\\lcsc-demo\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Asus\\Desktop\\lcsc-demo\\src\\components\\pages\\memberPages\\customer\\mailbox.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Asus\\Desktop\\lcsc-demo\\src\\components\\pages\\memberPages\\customer\\mailbox.vue","mtime":1560851086740},{"path":"C:\\Users\\Asus\\Desktop\\lcsc-demo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Asus\\Desktop\\lcsc-demo\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Asus\\Desktop\\lcsc-demo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Asus\\Desktop\\lcsc-demo\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  data() {\r\n    // 验证手机号\r\n    var checkPhone = (rule, value, callback) => {\r\n      if (value === \"\") {\r\n        callback(new Error(\"手机号码不可为空\"));\r\n      } else {\r\n        if (value !== \"\") {\r\n          var reg = /^1[3456789]\\d{9}$/;\r\n          if (!reg.test(value)) {\r\n            callback(new Error(\"请输入有效的手机号码\"));\r\n          }\r\n        }\r\n        callback();\r\n      }\r\n    };\r\n    return {\r\n      // 当前登录时间\r\n      nowLoginTime: \"\",\r\n      verificationCode: \"\", //生成的验证码\r\n      ruleForm1: {\r\n        username: \"\",\r\n        password: \"\",\r\n        selfLogin: \"\"\r\n      },\r\n      ruleForm2: {\r\n        phone: \"\",\r\n        selfLogin: \"\",\r\n        checkCode: \"\",\r\n        phoneCode: \"\"\r\n      },\r\n      // 表单的验证规则\r\n      rules1: {\r\n        username: [\r\n          // required必须 message 提示信息 trigger 触发方式\r\n          // min 最小 max 最大\r\n          { required: true, message: \"用户名不能为空\", trigger: \"blur\" },\r\n          {\r\n            min: 4,\r\n            max: 21,\r\n            message: \"长度在 4 到 21 个字符\",\r\n            trigger: \"change\"\r\n          }\r\n        ],\r\n        password: [\r\n          // required必须 message 提示信息 trigger 触发方式\r\n          // min 最小 max 最大\r\n          { required: true, message: \"密码不能为空\", trigger: \"blur\" },\r\n          {\r\n            min: 3,\r\n            max: 18,\r\n            message: \"长度在 3 到 18 个字符\",\r\n            trigger: \"change\"\r\n          }\r\n        ]\r\n      },\r\n      rules2: {\r\n        phone: [\r\n          {\r\n            validator: checkPhone,\r\n            trigger: \"blur\"\r\n          }\r\n        ],\r\n        checkCode: [\r\n          { required: true, message: \"验证码不能为空\", trigger: \"blur\" }\r\n        ],\r\n        phoneCode: [\r\n          { required: true, message: \"请输入手机验证码\", trigger: \"blur\" }\r\n        ]\r\n      }\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    // 图片验证码\r\n    createCode() {\r\n      //通过随机数生成验证码\r\n      this.verificationCode = \"\";\r\n      var code = \"\";\r\n      var codeLength = 4; //验证码长度\r\n      var random = new Array(\r\n        0,\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        5,\r\n        6,\r\n        7,\r\n        8,\r\n        9,\r\n        \"A\",\r\n        \"B\",\r\n        \"C\",\r\n        \"D\",\r\n        \"E\",\r\n        \"F\",\r\n        \"G\",\r\n        \"H\",\r\n        \"I\",\r\n        \"J\",\r\n        \"K\",\r\n        \"L\",\r\n        \"M\",\r\n        \"N\",\r\n        \"O\",\r\n        \"P\",\r\n        \"Q\",\r\n        \"R\",\r\n        \"S\",\r\n        \"T\",\r\n        \"U\",\r\n        \"V\",\r\n        \"W\",\r\n        \"X\",\r\n        \"Y\",\r\n        \"Z\"\r\n      );\r\n      for (var i = 0; i < codeLength; i++) {\r\n        var index = Math.floor(Math.random() * 36);\r\n        code += random[index];\r\n      }\r\n      this.verificationCode = code;\r\n    },\r\n    confirmTheCode() {\r\n      //验证函数\r\n      var customerCode = this.ruleForm.checkCode.toUpperCase(); //把你输入的小写转化为大写\r\n      if (customerCode == 0) {\r\n        this.createCode();\r\n        this.ruleForm.checkCode = \"\";\r\n        alert(\"请输入验证码\");\r\n      } else if (customerCode != this.verificationCode) {\r\n        this.createCode();\r\n        this.ruleForm.checkCode = \"\";\r\n        alert(\"验证码不正确，请重新输入\");\r\n      } else {\r\n        alert(\"输入正确\");\r\n      }\r\n    },\r\n\r\n    // 账号密码登入验证\r\n    async loginBtn(ruleForm1) {\r\n      this.$refs[ruleForm1].validate(valid => {\r\n        if (valid) {\r\n          // 数据正确\r\n          this.$http\r\n            .post(\r\n              `/api/member/sso/login?username=${\r\n                this.ruleForm1.username\r\n              }&password=${this.ruleForm1.password}`,\r\n              this.ruleForm1\r\n            )\r\n            .then(res => {\r\n              if (res.code === 404) {\r\n                // 错误 弹框 用户名或密码错误\r\n                this.$message.error(res.message);\r\n              } else {\r\n                // 成功弹框\r\n                this.$message.success(res.message);\r\n                // 保存token\r\n                window.sessionStorage.setItem(\"token\", res.data.token);\r\n                // 存cookie\r\n                Cookies.set(\"username\", this.ruleForm1.username);\r\n                // 获取登录时间\r\n                this.nowLoginTime = new Date();\r\n                Cookies.set('loginTime',this.nowLoginTime)\r\n                // 使用路由提供的方式进行跳转到上一页\r\n                this.$router.go(-1);\r\n              }\r\n            });\r\n        } else {\r\n          // 数据错误 this.$http\r\n          // this.$message.error(\"请正确输入用户名和密码\");\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n\r\n    // 动态登录\r\n    // 验证码\r\n    async getVerificationCode() {\r\n      if (this.ruleForm2.phone == \"\") {\r\n        this.$message({\r\n          message: \"请输入手机号码！\",\r\n          type: \"warning\"\r\n        });\r\n      } else {\r\n        if (this.ruleForm2.checkCode === this.verificationCode) {\r\n          console.log(112);\r\n\r\n          let res = await this.$http.get(\r\n            `/api/member/sso/getAuthCode?telephone=${this.ruleForm2.phone}`\r\n          );\r\n          this.ruleForm2.phoneCode = res.data;\r\n        } else {\r\n          this.$message({\r\n            message: \"请先通过图片验证！\",\r\n            type: \"warning\"\r\n          });\r\n        }\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.createCode();\r\n  }\r\n};\r\n",{"version":3,"sources":["mailbox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"mailbox.vue","sourceRoot":"src/components/pages/memberPages/customer","sourcesContent":["<template>\r\n    <div>\r\n         <el-form\r\n          :model=\"ruleForm2\"\r\n          status-icon\r\n          ref=\"ruleForm2\"\r\n          label-width=\"100px\"\r\n          class=\"demo-ruleForm\"\r\n          label-position=\"top\"\r\n          :rules=\"rules2\" >\r\n          <el-form-item prop=\"phone\" class=\"new_login\" style=\"margin-top:30px;\">\r\n            <span class=\"new_login_img\">\r\n              <i class=\"el-icon-mobile icon\"></i>\r\n            </span>\r\n            <el-input\r\n              v-model.trim=\"ruleForm2.phone\"\r\n              placeholder=\"请输入手机号\"\r\n              @keyup.enter.native=\"getVerificationCode\"\r\n            ></el-input>\r\n            <el-button\r\n              type=\"warning\"\r\n              class=\"code-btn\"\r\n              size=\"small\"\r\n              plain\r\n              @click=\"getVerificationCode\"\r\n            >发送验证码</el-button>\r\n          </el-form-item>\r\n          <el-form-item prop=\"checkCode\" class=\"new_login\" style=\"margin-top:30px;\">\r\n            <span class=\"new_login_img\">\r\n              <i class=\"el-icon-s-ticket icon\"></i>\r\n            </span>\r\n            <el-input\r\n              placeholder=\"请输入图片验证码\"\r\n              v-model.trim=\"ruleForm2.checkCode\"\r\n              @keyup.enter.native=\"getVerificationCode\"\r\n            ></el-input>\r\n            <!-- 图片验证码-->\r\n            <span class=\"code-style\" @click=\"createCode\">{{verificationCode}}</span>\r\n          </el-form-item>\r\n          <el-form-item prop=\"phoneCode\" class=\"new_login\" style=\"margin-top:30px;\">\r\n            <span class=\"new_login_img\">\r\n              <i class=\"el-icon-more-outline icon\"></i>\r\n            </span>\r\n            <el-input\r\n              v-model.trim=\"ruleForm2.phoneCode\"\r\n              placeholder=\"请输入手机验证码\"\r\n              @keyup.enter.native=\"getVerificationCode\"\r\n            ></el-input>\r\n          </el-form-item>\r\n          <!-- <el-form-item>\r\n            <el-checkbox class=\"check-login\" checked style=\"margin: 0;\">自动登录</el-checkbox>\r\n          </el-form-item> -->\r\n          <el-form-item>\r\n            <el-button\r\n              type=\"warning\"\r\n              @click=\"phoneLogin('ruleForm2'),confirmTheCode()\"\r\n              class=\"login-btn\"\r\n            >登&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;录</el-button>\r\n          </el-form-item>\r\n        </el-form>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    // 验证手机号\r\n    var checkPhone = (rule, value, callback) => {\r\n      if (value === \"\") {\r\n        callback(new Error(\"手机号码不可为空\"));\r\n      } else {\r\n        if (value !== \"\") {\r\n          var reg = /^1[3456789]\\d{9}$/;\r\n          if (!reg.test(value)) {\r\n            callback(new Error(\"请输入有效的手机号码\"));\r\n          }\r\n        }\r\n        callback();\r\n      }\r\n    };\r\n    return {\r\n      // 当前登录时间\r\n      nowLoginTime: \"\",\r\n      verificationCode: \"\", //生成的验证码\r\n      ruleForm1: {\r\n        username: \"\",\r\n        password: \"\",\r\n        selfLogin: \"\"\r\n      },\r\n      ruleForm2: {\r\n        phone: \"\",\r\n        selfLogin: \"\",\r\n        checkCode: \"\",\r\n        phoneCode: \"\"\r\n      },\r\n      // 表单的验证规则\r\n      rules1: {\r\n        username: [\r\n          // required必须 message 提示信息 trigger 触发方式\r\n          // min 最小 max 最大\r\n          { required: true, message: \"用户名不能为空\", trigger: \"blur\" },\r\n          {\r\n            min: 4,\r\n            max: 21,\r\n            message: \"长度在 4 到 21 个字符\",\r\n            trigger: \"change\"\r\n          }\r\n        ],\r\n        password: [\r\n          // required必须 message 提示信息 trigger 触发方式\r\n          // min 最小 max 最大\r\n          { required: true, message: \"密码不能为空\", trigger: \"blur\" },\r\n          {\r\n            min: 3,\r\n            max: 18,\r\n            message: \"长度在 3 到 18 个字符\",\r\n            trigger: \"change\"\r\n          }\r\n        ]\r\n      },\r\n      rules2: {\r\n        phone: [\r\n          {\r\n            validator: checkPhone,\r\n            trigger: \"blur\"\r\n          }\r\n        ],\r\n        checkCode: [\r\n          { required: true, message: \"验证码不能为空\", trigger: \"blur\" }\r\n        ],\r\n        phoneCode: [\r\n          { required: true, message: \"请输入手机验证码\", trigger: \"blur\" }\r\n        ]\r\n      }\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    // 图片验证码\r\n    createCode() {\r\n      //通过随机数生成验证码\r\n      this.verificationCode = \"\";\r\n      var code = \"\";\r\n      var codeLength = 4; //验证码长度\r\n      var random = new Array(\r\n        0,\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        5,\r\n        6,\r\n        7,\r\n        8,\r\n        9,\r\n        \"A\",\r\n        \"B\",\r\n        \"C\",\r\n        \"D\",\r\n        \"E\",\r\n        \"F\",\r\n        \"G\",\r\n        \"H\",\r\n        \"I\",\r\n        \"J\",\r\n        \"K\",\r\n        \"L\",\r\n        \"M\",\r\n        \"N\",\r\n        \"O\",\r\n        \"P\",\r\n        \"Q\",\r\n        \"R\",\r\n        \"S\",\r\n        \"T\",\r\n        \"U\",\r\n        \"V\",\r\n        \"W\",\r\n        \"X\",\r\n        \"Y\",\r\n        \"Z\"\r\n      );\r\n      for (var i = 0; i < codeLength; i++) {\r\n        var index = Math.floor(Math.random() * 36);\r\n        code += random[index];\r\n      }\r\n      this.verificationCode = code;\r\n    },\r\n    confirmTheCode() {\r\n      //验证函数\r\n      var customerCode = this.ruleForm.checkCode.toUpperCase(); //把你输入的小写转化为大写\r\n      if (customerCode == 0) {\r\n        this.createCode();\r\n        this.ruleForm.checkCode = \"\";\r\n        alert(\"请输入验证码\");\r\n      } else if (customerCode != this.verificationCode) {\r\n        this.createCode();\r\n        this.ruleForm.checkCode = \"\";\r\n        alert(\"验证码不正确，请重新输入\");\r\n      } else {\r\n        alert(\"输入正确\");\r\n      }\r\n    },\r\n\r\n    // 账号密码登入验证\r\n    async loginBtn(ruleForm1) {\r\n      this.$refs[ruleForm1].validate(valid => {\r\n        if (valid) {\r\n          // 数据正确\r\n          this.$http\r\n            .post(\r\n              `/api/member/sso/login?username=${\r\n                this.ruleForm1.username\r\n              }&password=${this.ruleForm1.password}`,\r\n              this.ruleForm1\r\n            )\r\n            .then(res => {\r\n              if (res.code === 404) {\r\n                // 错误 弹框 用户名或密码错误\r\n                this.$message.error(res.message);\r\n              } else {\r\n                // 成功弹框\r\n                this.$message.success(res.message);\r\n                // 保存token\r\n                window.sessionStorage.setItem(\"token\", res.data.token);\r\n                // 存cookie\r\n                Cookies.set(\"username\", this.ruleForm1.username);\r\n                // 获取登录时间\r\n                this.nowLoginTime = new Date();\r\n                Cookies.set('loginTime',this.nowLoginTime)\r\n                // 使用路由提供的方式进行跳转到上一页\r\n                this.$router.go(-1);\r\n              }\r\n            });\r\n        } else {\r\n          // 数据错误 this.$http\r\n          // this.$message.error(\"请正确输入用户名和密码\");\r\n          return false;\r\n        }\r\n      });\r\n    },\r\n\r\n    // 动态登录\r\n    // 验证码\r\n    async getVerificationCode() {\r\n      if (this.ruleForm2.phone == \"\") {\r\n        this.$message({\r\n          message: \"请输入手机号码！\",\r\n          type: \"warning\"\r\n        });\r\n      } else {\r\n        if (this.ruleForm2.checkCode === this.verificationCode) {\r\n          console.log(112);\r\n\r\n          let res = await this.$http.get(\r\n            `/api/member/sso/getAuthCode?telephone=${this.ruleForm2.phone}`\r\n          );\r\n          this.ruleForm2.phoneCode = res.data;\r\n        } else {\r\n          this.$message({\r\n            message: \"请先通过图片验证！\",\r\n            type: \"warning\"\r\n          });\r\n        }\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.createCode();\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n\r\n</style>\r\n"]}]}
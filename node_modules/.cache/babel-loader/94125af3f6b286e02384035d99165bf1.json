{"remainingRequest":"C:\\Users\\Asus\\Desktop\\lcsc-demo\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Asus\\Desktop\\lcsc-demo\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\Asus\\Desktop\\lcsc-demo\\src\\utils\\request.js","dependencies":[{"path":"C:\\Users\\Asus\\Desktop\\lcsc-demo\\src\\utils\\request.js","mtime":1560763750435},{"path":"C:\\Users\\Asus\\Desktop\\lcsc-demo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Asus\\Desktop\\lcsc-demo\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Asus\\Desktop\\lcsc-demo\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport { Message, MessageBox } from 'element-ui';\nimport store from \"../store\";\nimport { getToken } from '@/utils/auth'; // 创建axios实例\n\nvar service = axios.create({\n  baseURL: process.env.BASE_API,\n  // api的base_url\n  timeout: 15000 // 请求超时时间\n\n}); // request拦截器\n\nservice.interceptors.request.use(function (config) {\n  if (store.getters.token) {\n    config.headers['Authorization'] = getToken(); // 让每个请求携带自定义token 请根据实际情况自行修改\n  }\n\n  return config;\n}, function (error) {\n  // Do something with request error\n  console.log(error); // for debug\n\n  Promise.reject(error);\n}); // respone拦截器\n\nservice.interceptors.response.use(function (response) {\n  /**\n  * code为非200是抛错 可结合自己业务进行修改\n  */\n  var res = response.data;\n\n  if (res.code !== 200) {\n    Message({\n      message: res.message,\n      type: 'error',\n      duration: 3 * 1000\n    }); // 401:未登录;\n\n    if (res.code === 401 || res.code === 403) {\n      MessageBox.confirm('你已被登出，可以取消继续留在该页面，或者重新登录', '确定登出', {\n        confirmButtonText: '重新登录',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        store.dispatch('FedLogOut').then(function () {\n          location.reload(); // 为了重新实例化vue-router对象 避免bug\n        });\n      });\n    }\n\n    return Promise.reject('error');\n  } else {\n    return response.data;\n  }\n}, function (error) {\n  console.log('err' + error); // for debug\n\n  Message({\n    message: error.message,\n    type: 'error',\n    duration: 3 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;",{"version":3,"sources":["C:\\Users\\Asus\\Desktop\\lcsc-demo\\src\\utils\\request.js"],"names":["axios","Message","MessageBox","store","getToken","service","create","baseURL","process","env","BASE_API","timeout","interceptors","request","use","config","getters","token","headers","error","console","log","Promise","reject","response","res","data","code","message","type","duration","confirm","confirmButtonText","cancelButtonText","then","dispatch","location","reload"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,YAApC;AACA,OAAOC,KAAP;AACA,SAASC,QAAT,QAAyB,cAAzB,C,CAEA;;AACA,IAAMC,OAAO,GAAGL,KAAK,CAACM,MAAN,CAAa;AAC3BC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,QADM;AACI;AAC/BC,EAAAA,OAAO,EAAE,KAFkB,CAEZ;;AAFY,CAAb,CAAhB,C,CAKA;;AACAN,OAAO,CAACO,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CAAiC,UAAAC,MAAM,EAAI;AACzC,MAAIZ,KAAK,CAACa,OAAN,CAAcC,KAAlB,EAAyB;AACvBF,IAAAA,MAAM,CAACG,OAAP,CAAe,eAAf,IAAkCd,QAAQ,EAA1C,CADuB,CACsB;AAC9C;;AACD,SAAOW,MAAP;AACD,CALD,EAKG,UAAAI,KAAK,EAAI;AACV;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAFU,CAES;;AACnBG,EAAAA,OAAO,CAACC,MAAR,CAAeJ,KAAf;AACD,CATD,E,CAWA;;AACAd,OAAO,CAACO,YAAR,CAAqBY,QAArB,CAA8BV,GAA9B,CACE,UAAAU,QAAQ,EAAI;AACZ;;;AAGE,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAArB;;AACA,MAAID,GAAG,CAACE,IAAJ,KAAa,GAAjB,EAAsB;AACpB1B,IAAAA,OAAO,CAAC;AACN2B,MAAAA,OAAO,EAAEH,GAAG,CAACG,OADP;AAENC,MAAAA,IAAI,EAAE,OAFA;AAGNC,MAAAA,QAAQ,EAAE,IAAI;AAHR,KAAD,CAAP,CADoB,CAOpB;;AACA,QAAIL,GAAG,CAACE,IAAJ,KAAa,GAAb,IAAkBF,GAAG,CAACE,IAAJ,KAAa,GAAnC,EAAwC;AACtCzB,MAAAA,UAAU,CAAC6B,OAAX,CAAmB,0BAAnB,EAA+C,MAA/C,EAAuD;AACrDC,QAAAA,iBAAiB,EAAE,MADkC;AAErDC,QAAAA,gBAAgB,EAAE,IAFmC;AAGrDJ,QAAAA,IAAI,EAAE;AAH+C,OAAvD,EAIGK,IAJH,CAIQ,YAAM;AACZ/B,QAAAA,KAAK,CAACgC,QAAN,CAAe,WAAf,EAA4BD,IAA5B,CAAiC,YAAM;AACrCE,UAAAA,QAAQ,CAACC,MAAT,GADqC,CACpB;AAClB,SAFD;AAGD,OARD;AASD;;AACD,WAAOf,OAAO,CAACC,MAAR,CAAe,OAAf,CAAP;AACD,GApBD,MAoBO;AACL,WAAOC,QAAQ,CAACE,IAAhB;AACD;AACF,CA7BH,EA8BE,UAAAP,KAAK,EAAI;AACPC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAQF,KAApB,EADO,CACmB;;AAC1BlB,EAAAA,OAAO,CAAC;AACN2B,IAAAA,OAAO,EAAET,KAAK,CAACS,OADT;AAENC,IAAAA,IAAI,EAAE,OAFA;AAGNC,IAAAA,QAAQ,EAAE,IAAI;AAHR,GAAD,CAAP;AAKA,SAAOR,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD,CAtCH;AAyCA,eAAed,OAAf","sourcesContent":["import axios from 'axios'\nimport { Message, MessageBox } from 'element-ui'\nimport store from '../store'\nimport { getToken } from '@/utils/auth'\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: process.env.BASE_API, // api的base_url\n  timeout: 15000 // 请求超时时间\n})\n\n// request拦截器\nservice.interceptors.request.use(config => {\n  if (store.getters.token) {\n    config.headers['Authorization'] = getToken() // 让每个请求携带自定义token 请根据实际情况自行修改\n  }\n  return config\n}, error => {\n  // Do something with request error\n  console.log(error) // for debug\n  Promise.reject(error)\n})\n\n// respone拦截器\nservice.interceptors.response.use(\n  response => {\n  /**\n  * code为非200是抛错 可结合自己业务进行修改\n  */\n    const res = response.data\n    if (res.code !== 200) {\n      Message({\n        message: res.message,\n        type: 'error',\n        duration: 3 * 1000\n      })\n\n      // 401:未登录;\n      if (res.code === 401||res.code === 403) {\n        MessageBox.confirm('你已被登出，可以取消继续留在该页面，或者重新登录', '确定登出', {\n          confirmButtonText: '重新登录',\n          cancelButtonText: '取消',\n          type: 'warning'\n        }).then(() => {\n          store.dispatch('FedLogOut').then(() => {\n            location.reload()// 为了重新实例化vue-router对象 避免bug\n          })\n        })\n      }\n      return Promise.reject('error')\n    } else {\n      return response.data\n    }\n  },\n  error => {\n    console.log('err' + error)// for debug\n    Message({\n      message: error.message,\n      type: 'error',\n      duration: 3 * 1000\n    })\n    return Promise.reject(error)\n  }\n)\n\nexport default service\n"]}]}